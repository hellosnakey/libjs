(function($, undefined){    var DateUtil = {	    dates: {		    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],			daysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],			daysMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],			months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'Octobor', 'November', 'December'],			monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']		},		isLeapYear: function(year){		    return (((year%4 === 0) && (year%100 !== 0)) || (year%400 === 0));		},		getDaysInMonth: function(year, month){		    return [31, (DateUtil.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];		},		parseFormat: function(format){		    var sep = format.match(/[\/-]/),			    parts = format.split(/\W+/);			if(!sep || !parts || parts.length === 0){			    throw new Error('Invalid date format');			}			return {sep: sep, parts: parts};		},		parseDate: function(date, format){		    var today = new Date(),			    date = date || "",				parts = date.split(format.sep),				fparts = format.parts,				val,				date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);										if(parts.length === fparts.length){				    for(var i=0, len=fparts.length; i<len; i++){					    val = parseInt(parts[i], 10) || 1;				        switch(fparts[i]){						    case 'mm':							case 'm':							    date.setMonth(val - 1);							    break;							case 'dd':							case 'd':							    date.setDate(val);								break;							case 'yy':							    date.setFullYear(val + 2000);							    break;							case 'yyyy':							    date.setFullYear(val);								break;							  						}				    }									}				return date;		},		formatDate: function(date, format){			var val = {				d: date.getDate(),				m: date.getMonth() + 1,				yy: date.getFullYear().toString().substring(2),				yyyy: date.getFullYear()			};			val.dd = (val.d < 10 ? '0' : '') + val.d;			val.mm = (val.m < 10 ? '0' : '') + val.m;			var date = [];			for (var i=0, cnt = format.parts.length; i < cnt; i++) {				date.push(val[format.parts[i]]);			}			return date.join(format.sep);		}		};	    function DatePicker(el, opt){	   var me = this;	   this.element = $(el);	  	   me._processOpt(opt);	   me._initHtml();	   me._update();	   me._bindEvents();	   	}	DatePicker.prototype = {	    constructor: DatePicker,				template: "<div class='datepicker dropdown-menu'>" + 		              "<div class='datepicker-days'>" +					      "<table class='table-condensed'>" +					           "<thead>" +								  "<tr>" +									  "<th class='change pre1' ><i class='icon-arrow-left1'><<</i></th>" +									  "<th class='change pre2' ><i class='icon-arrow-left2'><</i></th>" +									  "<th colspan='3'></th>" +									  "<th class='change next1' ><i class='icon-arrow-right1'>></i></th>" +		                                      "<th class='change next2' ><i class='icon-arrow-right2'>>></i></th>" +									  								  "</tr>" +							   "</thead>" +							   "<tbody></tbody>" +					      "</table>"+ 					  "</div>" +		              		          "</div>",		_processOpt: function(opt){		    this.weekStart = opt.weekStart || 0;			this.format = DateUtil.parseFormat(opt.format || "mm/dd/yyyy");			            this.weekEnd = (this.weekStart === 0)? 6 : (this.weekStart - 1);				},		_initHtml: function(){		    this._picker = $(this.template).appendTo("body").hide();			this._initDow();		},		_initDow: function(){		    var dowCnt = this.weekStart,			    html = "<tr>";							while(dowCnt < this.weekStart + 7){				html += "<th class='dow'>" + DateUtil.dates.daysMin[(dowCnt++)%7] + "</th>";			}			html += '</tr>';						this._picker.find('.datepicker-days thead').append(html);		},		_bindEvents: function(){		    this.element.on({			    'click.Datepicker': $.proxy(this.show, this),				'focus.Datepicker': $.proxy(this.show, this),			    'keyup.Datepicker': $.proxy(this._update, this)				//'mousedown': $.proxy(this._mousedown, this)			});			this._picker.on({			    'mousedown': $.proxy(this._mousedown, this),				'click': $.proxy(this._click, this)			});		},		_click: function(e){		    if(e){			    e.preventDefault();				e.stopPropagation();			}		},		_setValue: function(){		    var formatted = DateUtil.formatDate(this.date, this.format);			this.element.val(formatted);		},		_mousedown: function(e){		    e.stopPropagation();			e.preventDefault();						var target = $(e.target).closest('td, th');			    			if(target.length === 1){			    var nodeName = target[0].nodeName.toLowerCase();				switch(nodeName){					case 'th':						switch(target[0].className){							case 'change pre1':							this.viewDate.setMonth(this.viewDate.getMonth() - 12);							break;							case 'change next2':							this.viewDate.setMonth(this.viewDate.getMonth() + 13);							case 'change pre2':							this.viewDate.setMonth(this.viewDate.getMonth() - 1);							break;							case 'change next1':							this.viewDate.setMonth(this.viewDate.getMonth() + 1);							break;						}						this._fill();						break;					case 'td':					    if(target.is('.day')){						    var month = this.viewDate.getMonth(),							    year = this.viewDate.getFullYear(),							    date = parseInt(target.text(), 10) || 1								;														if(target.is('.old')){							    month -= 1;							}							if(target.is('.new')){							    month += 1;							}							this.date = new Date(year, month, date, 0, 0, 0);							this.viewDate = new Date(year, month, date, 0, 0, 0);							this._fill();							this._setValue();							this.element.trigger({							    type: 'changeDate',								date: this.viewDate							});							this.hide();						}						break;				}			}					},		_update: function(){		    var date = this.element.val();			this.date = DateUtil.parseDate(date, this.format);			this.viewDate = new Date(this.date);			this._fill();		},		_place: function(){		    var offset = this.element.offset();		    this._picker.css({			    top: offset.top + this.height,				left: offset.left			});		},		_fill: function(){				    var date = this.viewDate, className = '',			year = date.getFullYear(), month = date.getMonth(),			preMonth = new Date(year, month-1, 28, 0, 0, 0),			nextMonth, currentDate = this.date.valueOf();			preMonth.setDate(DateUtil.getDaysInMonth(year, month));			preMonth.setDate(preMonth.getDate() - (preMonth.getDay() - this.weekStart + 7)%7);			nextMonth = new Date(preMonth);			nextMonth.setDate(preMonth.getDate() + 42);			var html = [], nextValue = nextMonth.valueOf(), prem;			while(preMonth.valueOf() < nextValue){			    if(preMonth.getDay() == this.weekStart){				    html.push('<tr>');				}				prem = preMonth.getMonth();				if((prem === 11 && month === 0) || (prem < month && prem !== 0) ){				    className = 'old';				}else if((prem === 0 && month === 11) || prem > month){				    className = 'new';				}else{				    className = '';				}								if(currentDate === preMonth.valueOf()){				    className = 'active'				}				html.push("<td class='day " + className + "'>" + preMonth.getDate() + "</td>");				if(preMonth.getDay === this.weekEnd){				    html.push('</tr>')				}				preMonth.setDate(preMonth.getDate() + 1);			}					    this._picker.find('.datepicker-days th:eq(2)').text(DateUtil.dates.monthsShort[month] + "  " + year);			this._picker.find('.datepicker-days tbody').empty().append(html.join(''));		},		show: function(e){		    this.height = this.element.outerHeight();			this._picker.show();			this._place();			if(e){			    e.preventDefault();				e.stopPropagation();			}			$(window).on('resize', $.proxy(this._place, this));			$(document).on('click', $.proxy(this.hide, this));		},		hide: function(){		    this._picker.hide();			$(window).off('resize', $.proxy(this._place,this));			$(document).off('click', $.proxy(this.hide, this));		},		destroy: function() { 		    this.element.off(".Datepicker"); 			this._picker.empty();		}	};	    $.fn.datepicker = function(opt){	    return new DatePicker(this, opt);	};	})(window.$, undefined);